Introduction to Go
Talk at TEx-03 by BearingPoint Technology GmbH
14:00 14 Feb 2019
Tags: go, golang, intro

Herbert Mühlburger
Solution Architect
@hmuehlburger
https://blog.muehlburger.at

* Notes

- The slides are available [[http://talks.godoc.org/github.com/muehlburger/talks/TEx-03/intro-to-go.slide][here]] and source code on [[https://github.com/muehlburger/talks][Github]].

* Gopher

.image img/gopher.jpg 300 _
.caption [[https://gopherize.me][Gopherize.me]]

* Agenda

- Why Go?
- Who uses Go?
- How to get started?
- Simple RESTful Microservice using Go, Docker, helm, GCP

* Why Golang?

.link https://docs.google.com/presentation/d/1x_mtMIBbxQU0zLmxgPSvZ0GFaRrfOOjneeNeahLQcto/edit#slide=id.p Why Go by Todd McLeod

* Who uses Go?

.link https://github.com/golang/go/wiki/GoUsers GoUsers
.link https://github.com/avelino/awesome-go Awesome-Go

- Kubernetes, docker, moby, etcd, terraform, prometheus, helm, ...

* How to get started?

.link https://golang.org golang.org
.link https://tour.golang.org tour.golang.org
.link https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw JustForFunc: Programming in Go
.link http://www.golangbootcamp.com/book/basics The basics
.link https://gobyexample.com Go by Example


* Hello World

.play code/hello-world/main.go /^package/,/^}/

* Go Keywords

The Go language is simple, and contains small set of [[https://golang.org/ref/spec#Keywords][keywords]].

    break        default      func         interface    select
    case         defer        go           map          struct
    chan         else         goto         package      switch
    const        fallthrough  if           range        type
    continue     for          import       return       var

* Tooling

- go run
- go test
- go build
- GOOS=windows go build
- GOOS=linux go build
- go install
- go get
- gofmt
- goimport
- go list

go list -f '{{ join .Imports "\n"}}'

* Simple HTTP Client

.play code/http/main.go /^package/,/^}/

* Simple Go Microservice

* Create Handlers to handle HTTP Requests

We will create two routes, one for root and one for movies:

- /
- /movies

The first route will serve just the current URL.Path.
The second route will serve a list of movies.

* Create a handler function to serve the root 

Go uses Handler functions to serve HTTP Requests. Each HTTP Request is handled in a seperate goroutine.

.play code/web-server/main.go /^func rootHandler/,/^}/

This function returns the current URL path.

* Create a handler function to serve a list of Movies

Go uses structs to group data (similar to Classes in Java, C++ or structs in C)

.code code/web-server/main.go /^type Movie/,/^}/

Define a slice of Movies called _db_ to simulate a database containing movies:

.code code/web-server/main.go /^var db/,/^}/

* Create a handler function to serve a list of Movies

Create a handler function serve movies:

.code code/web-server/main.go /^func movieHandler/,/^}/

* Create func main.go and register handler function to routes:

.play code/web-server/main.go /^func main()/,/^}/

This registers the handler functions to serve specific routes and starts serving HTTP traffic.

* Create and build Docker container

2. Create and build container

    docker build -t web-server:0.0.1 .
    docker push ...

3. Create Helmchart and edit _values.yaml_

    helm create web-server

4. Install/Upgrade helm chart

    helm install charts/web-server -n web-server

* Further Resources

.link https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw JustForFunc: Programming in Go
.link https://www.udemy.com/learn-how-to-code/ Learn How To Code: Google's Go (golang) Programming Language
.link https://www.udemy.com/go-programming-language/ Web Development w/ Google’s Go (golang) Programming Language

.link https://gobyexample.com/ Go By Example
.link https://github.com/spf13/cobra A Commander for modern Go CLI interactions

Interesting other projects:
.link https://gobot.io/ GOBOT
.link https://gocv.io/ GoCV

* Books

.image img/gopl.png _ 400 
.link http://www.gopl.io
